@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using TheOrangeRun.Pawns;
@using TheOrangeRun.UI;

@namespace TheOrangeRun.UI
@inherits RootPanel
@attribute [StyleSheet]

<root>
    <ChatBox />

    <div class="pointer-visible" />

    <div class="header">
        <label>The Orange Run</label>
        <label class="subtitle">Collect oranges and drop them at the boxes near spawn.</label>
    </div>

    <div class="game-states-view">
        <div class="game-states-header">Game State</div>
        <div class="game-states-list" id="gameStatesList">
            <div class="game-state active">Lobby</div>
            <div class="game-state">Orange Run</div>
            <div class="game-state">Leaderboard</div>
            <div class="game-state hidden">Lobby</div>
        </div>
    </div>

    @if (Pawn.IsScoreScreenVisible || TheOrangeRunGameManager.Current.State == GameState.Leaderboard)
    {
        <table class="users-list">
            <tr>
                <th>Player</th>
                <th>Oranges</th>
            </tr>
            @foreach (var playerStats in Stats)
            {
                <tr class="@(playerStats.IsCurrentUser ? "current" : "") @(playerStats.IsAfterCurrentUser ? "after-current" : "")">
                    <td>@playerStats.DisplayName</td>
                    <td>@playerStats.CollectedOrangesCount</td>
                </tr>
            }
        </table>
    }

    <div class="orange-bag">
        <label>@Pawn.OrangeCarryCount</label><label>/</label><label>@Pawn.MaximumOrangeCarryCount</label>
    </div>
</root>

@code
{
    private GameState _gameState = GameState.Lobby;
    private ISet<ChatEntry> _chatEntries = new HashSet<ChatEntry>();

    private IClient Client
    => Game.LocalClient;

    private Pawn Pawn
        => (Pawn)Game.LocalPawn;

    private TheOrangeRunGameManager GameManager
        => (TheOrangeRunGameManager)TheOrangeRunGameManager.Current;

    private IEnumerable<(string DisplayName, int CollectedOrangesCount, bool IsCurrentUser, bool IsAfterCurrentUser)> Stats
    {
        get
        {
            var index = 0;
            return GameManager
                .PlayerPawns
                .OrderByDescending(playerPawn => playerPawn.CollectedOrangesCount)
                .ThenBy(playerPawn => playerPawn.Client.Name)
                .Aggregate(
                    new List<(string DisplayName, int CollectedOrangesCount, bool IsCurrentUser, bool IsAfterCurrentUser)>(),
                    (result, playerPawn) =>
                    {
                        result.Add((
                            DisplayName: playerPawn.Client.Name,
                            CollectedOrangesCount: playerPawn.CollectedOrangesCount,
                            IsCurrentUser: Game.LocalPawn == playerPawn,
                            IsAfterCurrentUser: index > 0 && result[index - 1].IsCurrentUser)
                        );
                        index++;
                        return result;
                    }
                );
        }
    }

    protected override int BuildHash()
        => HashCode.Combine(
            Pawn.IsScoreScreenVisible,
            Pawn.OrangeCarryCount,
            TheOrangeRunGameManager.Current.State,
            GameManager.PlayerPawns.Aggregate(
                0,
                (hash, playerPawn) => HashCode.Combine(hash, playerPawn.CollectedOrangesCount)
            )
        );

    public override void Tick()
    {
        switch (GameManager.State)
        {
            case GameState.Lobby:
            case GameState.OrangeRun:
            case GameState.Leaderboard:
                if (_gameState != GameManager.State)
                {
                    _GameStateChanged(GameManager.State);
                    _gameState = GameManager.State;
                }
                break;
        }

        var chatEntries = ChildrenOfType<ChatBox>()
            .Single()
            .ChildrenOfType<Panel>()
            .SelectMany(panel => panel.ChildrenOfType<ChatEntry>());

        if (chatEntries.Any(_chatEntries.Add))
        {
            _chatEntries = new HashSet<ChatEntry>(chatEntries);
            Sound.FromScreen(Sounds.Events.MessageSent);
        }

        var devCam = Game.LocalClient.Components.Get<DevCamera>();
        SetClass("camera-movement", Input.UsingController || Input.Down("attack2") || devCam is not null);
    }

    private void _GameStateChanged(GameState gameState)
    {
        var gameStatesList = Descendants.SingleOrDefault(panel => panel.Id == "gameStatesList");
        if (gameStatesList is not null)
        {
            var childrenOffset = 0;
            if (gameStatesList.ChildrenCount > 4)
            {
                childrenOffset = 1;
                gameStatesList.Children.First().Delete();
            }

            var previousStateElement = gameStatesList.Children.ElementAt(childrenOffset + 0);
            previousStateElement.Classes = "game-state inactive";

            var currentStateElement = gameStatesList.Children.ElementAt(childrenOffset + 1);
            currentStateElement.Classes = "game-state active";

            var hiddenStateElement = gameStatesList.Children.Last();
            hiddenStateElement.Classes = "game-state";

            var futureGameState = gameStatesList.AddChild<Panel>("game-state hidden");
            futureGameState.AddChild(
                new Label
                    {
                        Text = gameState switch
                        {
                            GameState.Lobby => "Lobby",
                            GameState.OrangeRun => "Orange Run",
                            GameState.Leaderboard => "Leaderboard",
                            _ => throw new InvalidOperationException($"Unhandled game state on UI transition view: {gameState}")
                        }
                    }
            );
        }
    }
}
